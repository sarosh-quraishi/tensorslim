[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tensorslim"
version = "0.1.0"
description = "Fast neural network compression using randomized SVD - Make your models runway-ready"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Sarosh Quraishi", email = "sarosh.quraishi@gmail.com" }
]
keywords = [
    "machine-learning",
    "deep-learning", 
    "model-compression",
    "svd",
    "pytorch",
    "transformers",
    "neural-networks"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "numpy>=1.21.0",
    "typing-extensions>=4.0.0",
    "tqdm>=4.60.0",
    "transformers>=4.46.3",
]

[project.optional-dependencies]
huggingface = [
    "transformers>=4.20.0",
    "tokenizers>=0.13.0",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
]
benchmark = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.4.0",
    "scikit-learn>=1.1.0",
    "memory-profiler>=0.60.0",
]
all = [
    "tensorslim[huggingface,dev,benchmark]"
]

[project.scripts]
tensorslim-compress = "tensorslim.cli:main"

[project.urls]
Homepage = "https://github.com/tensorslim/tensorslim"
Documentation = "https://tensorslim.readthedocs.io"
Repository = "https://github.com/tensorslim/tensorslim"
"Bug Tracker" = "https://github.com/tensorslim/tensorslim/issues"
Changelog = "https://github.com/tensorslim/tensorslim/releases"

[tool.hatch.build.targets.wheel]
packages = ["src/tensorslim"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/examples",
    "/benchmarks",
    "/docs",
    "README.md",
    "LICENSE",
    "CONTRIBUTING.md",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tensorslim"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "memory_profiler.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-ra",
]
# Note: Coverage options require pytest-cov to be installed
# "--cov=tensorslim",
# "--cov-report=term-missing",
# "--cov-report=html",
# "--cov-report=xml",
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/tensorslim"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
